name: 🚀 构建并部署到阿里云

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master

env:
  # 阿里云容器镜像服务配置
  ALIBABA_CLOUD_REGISTRY: crpi-wzl2k45d0lxbiagj.cn-shenzhen.personal.cr.aliyuncs.com
  NAMESPACE: bhuang-repo
  IMAGE_NAME: bhuang-mcp-server-sse

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: ☕ 设置 JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 📦 Maven 缓存
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 🔧 Maven 编译和测试
      run: |
        mvn clean compile test -q
        echo "✅ Maven 编译和测试完成"

    - name: 📦 打包应用
      run: |
        mvn package -DskipTests -q
        echo "✅ 应用打包完成"

    - name: 🏷️ 生成镜像标签
      id: meta
      run: |
        # 基础镜像名
        IMAGE_BASE="${ALIBABA_CLOUD_REGISTRY}/${NAMESPACE}/${IMAGE_NAME}"
        
        # 根据触发事件生成标签
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          # 标签推送：使用版本号
          VERSION=${GITHUB_REF#refs/tags/v}
          TAGS="${IMAGE_BASE}:${VERSION},${IMAGE_BASE}:latest"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == refs/heads/main ]] || [[ $GITHUB_REF == refs/heads/master ]]; then
          # 主分支推送：使用latest和提交SHA
          SHORT_SHA=${GITHUB_SHA::8}
          TAGS="${IMAGE_BASE}:latest,${IMAGE_BASE}:${SHORT_SHA}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "version=latest" >> $GITHUB_OUTPUT
        else
          # 其他分支：使用分支名和提交SHA
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          SHORT_SHA=${GITHUB_SHA::8}
          SAFE_BRANCH=$(echo ${BRANCH_NAME} | sed 's/[^a-zA-Z0-9.-]/-/g')
          TAGS="${IMAGE_BASE}:${SAFE_BRANCH}-${SHORT_SHA}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "version=${SAFE_BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        fi
        
        echo "🏷️ 生成的镜像标签: $(echo $TAGS | tr ',' '\n')"

    - name: 🔐 登录阿里云容器镜像服务
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ALIBABA_CLOUD_REGISTRY }}
        username: ${{ secrets.ALIBABA_CLOUD_USERNAME }}
        password: ${{ secrets.ALIBABA_CLOUD_PASSWORD }}

    - name: 🐳 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔨 构建并推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        platforms: linux/amd64,linux/arm64
        labels: |
          org.opencontainers.image.title=Bhuang MCP Server SSE
          org.opencontainers.image.description=Weather Service MCP Server with SSE Transport
          org.opencontainers.image.version=${{ steps.meta.outputs.version }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 📋 部署信息
      run: |
        echo "## 🎉 部署成功!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 镜像信息" >> $GITHUB_STEP_SUMMARY
        echo "- **仓库**: \`${{ env.ALIBABA_CLOUD_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **标签**: \`${{ steps.meta.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **架构**: \`linux/amd64, linux/arm64\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 部署命令" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# 拉取镜像" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.ALIBABA_CLOUD_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# 运行容器" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d --name bhuang-mcp-server \\" >> $GITHUB_STEP_SUMMARY
        echo "  -p 8080:9090 \\" >> $GITHUB_STEP_SUMMARY
        echo "  -e JAVA_OPTS=\"-Xms512m -Xmx1024m -XX:+UseG1GC\" \\" >> $GITHUB_STEP_SUMMARY
        echo "  -e TZ=\"Asia/Shanghai\" \\" >> $GITHUB_STEP_SUMMARY
        echo "  ${{ env.ALIBABA_CLOUD_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 服务端点" >> $GITHUB_STEP_SUMMARY
        echo "- **健康检查**: \`http://localhost:8080/actuator/health\`" >> $GITHUB_STEP_SUMMARY
        echo "- **MCP SSE**: \`http://localhost:8080/sse\`" >> $GITHUB_STEP_SUMMARY
        echo "- **MCP 消息**: \`http://localhost:8080/mcp/messages\`" >> $GITHUB_STEP_SUMMARY

  # 仅在主分支成功部署后执行
  notify-success:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: 🎉 部署成功通知
      run: |
        echo "🚀 Bhuang MCP Server SSE 已成功部署到阿里云!"
        echo "📦 镜像地址: ${{ env.ALIBABA_CLOUD_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest"
        echo "🔗 可以通过以下命令拉取和运行:"
        echo "   docker pull ${{ env.ALIBABA_CLOUD_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest" 